buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

// get config values from gradle.properties.
ext.configFile = file('gradle.properties')
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.minecraft_version}-${config.version}"
group = "com.zhilizhan.${config.mod_id}"
archivesBaseName = "${config.mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {

    mappings channel: 'parchment', version: '2022.03.06-1.16.5'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {

            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            //avoid pachouli mod crash
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                bpmc {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                bpmc {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'bpmc', '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing', file('src/generated/resources/')

            mods {
                bpmc {
                    source sourceSets.main
                }
            }
        }
    }
}
mixin {
    add sourceSets.main, "bpmc.refmap.json"

    config "mixin.bpmc.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name "CurseMaven"
        url "https://cursemaven.com"
    }
    maven {
        name "Parchment"
        url "https://maven.parchmentmc.org"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.39'

    implementation fg.deobf("curse.maven:configured-457570:${configured_version}")
    implementation fg.deobf("curse.maven:htpvz-for-pmc-1129880:${pvz_file_id}")
    runtimeOnly fg.deobf("curse.maven:jei-238222:${jei_file_id}")
    runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_file_id}")
    runtimeOnly fg.deobf("curse.maven:configured-457570:${configured_file_id}")
    runtimeOnly fg.deobf("curse.maven:suggestionproviderfix-469647:${suggestionproviderfix_file_id}") //指令补全
    implementation fg.deobf("curse.maven:mowziesmobs-250498:4120133")//Mowzie's Mobs
    implementation fg.deobf("curse.maven:gek-388172:4182600")//壁虎库

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    //ban the annoying mod.
//    implementation fg.deobf("curse.maven:getinthebucketmod-345984:${bucket_version}")
}


processResources {
    // replace stuff in mcmod.info, nothing else
    duplicatesStrategy = 'EXCLUDE'
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // replace version and mcversion
        expand 'version': project.version
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "${config.mod_id}",
                "Specification-Vendor": "${config.mod_owner}",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": "${config.mod_id}",
                "Implementation-Version": "${config.mod_version}",
                "Implementation-Vendor" :"${config.mod_owner}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')
tasks.withType(JavaCompile).configureEach {
    options.encoding "UTF-8"
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
